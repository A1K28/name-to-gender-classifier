{"version":3,"sources":["logo.svg","gender-classifier/gender-classifier-app.jsx","App.js","reportWebVitals.js","index.js"],"names":["GenderClassifierApp","props","handleChange","e","setState","input","target","value","predict","a","state","g","gender","className","type","onChange","this","onClick","Component","sleep","ms","Promise","resolve","setTimeout","console","log","tf","model","MODEL","loadModel","char_idx","setFlag","i","tmp","Array","fill","namesToVec","names","b","X","length","name","substring","j","undefined","push","then","res","dataSync","ans","isFemale","Math","floor","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9aa43b1d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react'\r\n\r\nimport './style/gender-classifier-app.css'\r\nimport * as tf from '@tensorflow/tfjs';\r\n\r\nexport default class GenderClassifierApp extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            input: \"ASD\",\r\n            gender: null\r\n        }\r\n    }\r\n\r\n    componentDidMount() {}\r\n\r\n    handleChange = (e) => {\r\n        this.setState({input: e.target.value})\r\n    }\r\n\r\n    predict = async() => {\r\n        let g = await predict([this.state.input]);\r\n        this.setState({gender: g});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"gender-classifier-app\">\r\n                <div className='GI'>\r\n                    <input className='gender-input' type=\"text\" onChange={ this.handleChange } />\r\n                    <input\r\n                        type=\"button\"\r\n                        className='gender-button'\r\n                        value=\"Alert the text input\"\r\n                        onClick={this.predict}\r\n                    />\r\n                </div>\r\n                <div className=\"result-text\">{this.state.gender}</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nasync function loadModel() {\r\n    console.log('Loading model');\r\n    // const model = await tf.loadModel('model.json');\r\n    const model = await tf.loadLayersModel(\"http://127.0.0.1:8080/model/model.json\");\r\n    // const model = await tf.loadLayersModel(\"file:///Q:/scripts/github-io/gender-classifier-app/model/model.json\");\r\n    await sleep(2000);\r\n    console.log('Model loaded');\r\n    console.log(model);\r\n\treturn model;\r\n};\r\nconst MODEL = loadModel();\r\n\r\nvar dict = {\r\n    \"ა\":'a',\r\n    'ბ':'b'\r\n}\r\n\r\nfunction translit(names) {\r\n    for (let i = 0; i < names.length; i++) {\r\n        let name = names[i];\r\n        console.log(name)\r\n    }\r\n}\r\n\r\nvar MAXLEN = 18;\r\nvar VOCABLEN = 29;\r\nvar char_idx = {'T': 0, 'e': 1, 'p': 2, 's': 3, 'l': 4, \"'\": 5, 'k': 6, \r\n'n': 7, 'q': 8, 'v': 9, 'o': 10, ' ': 11, 'g': 12, \r\n'END': 13, 'i': 14, 'b': 15, '-': 16, 'h': 17, 't': 18, \r\n'f': 19, 'c': 20, 'r': 21, 'j': 22, 'z': 23, 'a': 24, \r\n'm': 25, 'd': 26, 'y': 27, 'u': 28}\r\n\r\nfunction main() {\r\n    translit(['asd', 'ASD'])\r\n}\r\n\r\nfunction setFlag(i) {\r\n  let tmp = new Array(VOCABLEN).fill(0);\r\n  tmp[i] = 1;\r\n  return tmp;\r\n}\r\n\r\nfunction min(a, b) {\r\n    return a >= b ? a : b;\r\n}\r\n\r\nfunction namesToVec(names) {\r\n    let X = []\r\n    for (let i = 0; i < names.length; i++) {\r\n        let name = names[i].substring(0, min(MAXLEN, names[i].length));\r\n        let tmp = []\r\n        for (let j = 0; j < name.length; j++) {\r\n            if (char_idx[name[j]] !== undefined) {\r\n                tmp.push(setFlag(char_idx[name[j]]));\r\n            } else {\r\n                tmp.push(setFlag(char_idx[' ']));\r\n            }\r\n        }\r\n        for (let j = 0; j < MAXLEN-name.length; j++) {\r\n            tmp.push(setFlag(char_idx['END']))\r\n        }\r\n        X.push(tmp);\r\n    }\r\n    return X;\r\n}\r\n\r\nasync function predict(names) {\r\n    let X = namesToVec(names);\r\n    console.log(names);\r\n    let ans = await MODEL.then((model) => {\r\n        const res = model.predict(tf.tensor(X)).dataSync();\r\n        let ans = []\r\n        for (let i = 1; i < res.length; i+=2) {\r\n            let isFemale = res[i];\r\n            ans.push([names[Math.floor(i/2)], isFemale]);\r\n        }\r\n        return ans;\r\n    });\r\n    return ans;\r\n}","import logo from './logo.svg';\nimport './App.css';\nimport GenderClassifierApp from './gender-classifier/gender-classifier-app';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GenderClassifierApp></GenderClassifierApp>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}